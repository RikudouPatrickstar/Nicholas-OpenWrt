From 2647a7a4b4096912547c979ff2e3d633ff112452 Mon Sep 17 00:00:00 2001
From: EkkoG <beijiu572@gmail.com>
Date: Tue, 24 Sep 2024 02:36:04 +0000
Subject: [PATCH 01/24] chore: define more DNS scheme

---
 component/dns/dns.go      |   2 +-
 component/dns/upstream.go |  41 ++++--
 control/dns_control.go    | 275 ++++++++++++++++++++++++++++----------
 go.mod                    |   2 +-
 4 files changed, 243 insertions(+), 77 deletions(-)

diff --git a/component/dns/dns.go b/component/dns/dns.go
index b6917e3..96ca5ce 100644
--- a/component/dns/dns.go
+++ b/component/dns/dns.go
@@ -128,7 +128,7 @@ func New(dns *config.Dns, opt *NewOption) (s *Dns, err error) {
 
 func (s *Dns) CheckUpstreamsFormat() error {
 	for _, upstream := range s.upstream {
-		_, _, _, err := ParseRawUpstream(upstream.Raw)
+		_, _, _, _, err := ParseRawUpstream(upstream.Raw)
 		if err != nil {
 			return err
 		}
diff --git a/component/dns/upstream.go b/component/dns/upstream.go
index bd8682f..0adee2f 100644
--- a/component/dns/upstream.go
+++ b/component/dns/upstream.go
@@ -30,6 +30,11 @@ const (
 	UpstreamScheme_UDP           UpstreamScheme = "udp"
 	UpstreamScheme_TCP_UDP       UpstreamScheme = "tcp+udp"
 	upstreamScheme_TCP_UDP_Alias UpstreamScheme = "udp+tcp"
+	UpstreamScheme_TLS           UpstreamScheme = "tls"
+	UpstreamScheme_QUIC          UpstreamScheme = "quic"
+	UpstreamScheme_HTTPS         UpstreamScheme = "https"
+	upstreamScheme_H3_Alias      UpstreamScheme = "http3"
+	UpstreamScheme_H3            UpstreamScheme = "h3"
 )
 
 func (s UpstreamScheme) ContainsTcp() bool {
@@ -42,8 +47,9 @@ func (s UpstreamScheme) ContainsTcp() bool {
 	}
 }
 
-func ParseRawUpstream(raw *url.URL) (scheme UpstreamScheme, hostname string, port uint16, err error) {
+func ParseRawUpstream(raw *url.URL) (scheme UpstreamScheme, hostname string, port uint16, path string, err error) {
 	var __port string
+	var __path string
 	switch scheme = UpstreamScheme(raw.Scheme); scheme {
 	case upstreamScheme_TCP_UDP_Alias:
 		scheme = UpstreamScheme_TCP_UDP
@@ -53,27 +59,45 @@ func ParseRawUpstream(raw *url.URL) (scheme UpstreamScheme, hostname string, por
 		if __port == "" {
 			__port = "53"
 		}
+	case upstreamScheme_H3_Alias:
+		scheme = UpstreamScheme_H3
+		fallthrough
+	case UpstreamScheme_HTTPS, UpstreamScheme_H3:
+		__port = raw.Port()
+		if __port == "" {
+			__port = "443"
+		}
+		__path = raw.Path
+		if __path == "" {
+			__path = "/dns-query"
+		}
+	case UpstreamScheme_QUIC, UpstreamScheme_TLS:
+		__port = raw.Port()
+		if __port == "" {
+			__port = "853"
+		}
 	default:
-		return "", "", 0, fmt.Errorf("unexpected scheme: %v", raw.Scheme)
+		return "", "", 0, "", fmt.Errorf("unexpected scheme: %v", raw.Scheme)
 	}
 	_port, err := strconv.ParseUint(__port, 10, 16)
 	if err != nil {
-		return "", "", 0, fmt.Errorf("failed to parse dns_upstream port: %v", err)
+		return "", "", 0, "", fmt.Errorf("failed to parse dns_upstream port: %v", err)
 	}
 	port = uint16(_port)
 	hostname = raw.Hostname()
-	return scheme, hostname, port, nil
+	return scheme, hostname, port, __path, nil
 }
 
 type Upstream struct {
 	Scheme   UpstreamScheme
 	Hostname string
 	Port     uint16
+	Path     string
 	*netutils.Ip46
 }
 
 func NewUpstream(ctx context.Context, upstream *url.URL, resolverNetwork string) (up *Upstream, err error) {
-	scheme, hostname, port, err := ParseRawUpstream(upstream)
+	scheme, hostname, port, path, err := ParseRawUpstream(upstream)
 	if err != nil {
 		return nil, fmt.Errorf("%w: %v", ErrFormat, err)
 	}
@@ -100,6 +124,7 @@ func NewUpstream(ctx context.Context, upstream *url.URL, resolverNetwork string)
 		Scheme:   scheme,
 		Hostname: hostname,
 		Port:     port,
+		Path:     path,
 		Ip46:     ip46,
 	}, nil
 }
@@ -115,9 +140,9 @@ func (u *Upstream) SupportedNetworks() (ipversions []consts.IpVersionStr, l4prot
 		}
 	}
 	switch u.Scheme {
-	case UpstreamScheme_TCP:
+	case UpstreamScheme_TCP, UpstreamScheme_HTTPS, UpstreamScheme_TLS:
 		l4protos = []consts.L4ProtoStr{consts.L4ProtoStr_TCP}
-	case UpstreamScheme_UDP:
+	case UpstreamScheme_UDP, UpstreamScheme_QUIC, UpstreamScheme_H3:
 		l4protos = []consts.L4ProtoStr{consts.L4ProtoStr_UDP}
 	case UpstreamScheme_TCP_UDP:
 		// UDP first.
@@ -127,7 +152,7 @@ func (u *Upstream) SupportedNetworks() (ipversions []consts.IpVersionStr, l4prot
 }
 
 func (u *Upstream) String() string {
-	return string(u.Scheme) + "://" + net.JoinHostPort(u.Hostname, strconv.Itoa(int(u.Port)))
+	return string(u.Scheme) + "://" + net.JoinHostPort(u.Hostname, strconv.Itoa(int(u.Port))) + u.Path
 }
 
 type UpstreamResolver struct {
diff --git a/control/dns_control.go b/control/dns_control.go
index ac653e8..b4c202d 100644
--- a/control/dns_control.go
+++ b/control/dns_control.go
@@ -7,12 +7,16 @@ package control
 
 import (
 	"context"
+	"crypto/tls"
+	"encoding/base64"
 	"encoding/binary"
 	"fmt"
 	"io"
 	"math"
 	"net"
+	"net/http"
 	"net/netip"
+	"net/url"
 	"strconv"
 	"strings"
 	"sync"
@@ -28,6 +32,9 @@ import (
 	"github.com/daeuniverse/outbound/netproxy"
 	"github.com/daeuniverse/outbound/pkg/fastrand"
 	"github.com/daeuniverse/outbound/pool"
+	tc "github.com/daeuniverse/outbound/protocol/tuic/common"
+	"github.com/daeuniverse/quic-go"
+	"github.com/daeuniverse/quic-go/http3"
 	dnsmessage "github.com/miekg/dns"
 	"github.com/mohae/deepcopy"
 	"github.com/sirupsen/logrus"
@@ -586,54 +593,122 @@ func (c *DnsController) dialSend(invokingDepth int, req *udpRequest, data []byte
 		_ = conn.SetDeadline(time.Now().Add(timeout))
 		dnsReqCtx, cancelDnsReqCtx := context.WithTimeout(context.TODO(), timeout)
 		defer cancelDnsReqCtx()
-		go func() {
-			// Send DNS request every seconds.
-			for {
-				_, err = conn.Write(data)
-				if err != nil {
-					if c.log.IsLevelEnabled(logrus.DebugLevel) {
-						c.log.WithFields(logrus.Fields{
-							"to":      dialArgument.bestTarget.String(),
-							"pid":     req.routingResult.Pid,
-							"pname":   ProcessName2String(req.routingResult.Pname[:]),
-							"mac":     Mac2String(req.routingResult.Mac[:]),
-							"from":    req.realSrc.String(),
-							"network": networkType.String(),
-							"err":     err.Error(),
-						}).Debugln("Failed to write UDP(DNS) packet request.")
+		switch upstream.Scheme {
+		case dns.UpstreamScheme_UDP, dns.UpstreamScheme_TCP_UDP:
+			go func() {
+				// Send DNS request every seconds.
+				for {
+					_, err = conn.Write(data)
+					if err != nil {
+						if c.log.IsLevelEnabled(logrus.DebugLevel) {
+							c.log.WithFields(logrus.Fields{
+								"to":      dialArgument.bestTarget.String(),
+								"pid":     req.routingResult.Pid,
+								"pname":   ProcessName2String(req.routingResult.Pname[:]),
+								"mac":     Mac2String(req.routingResult.Mac[:]),
+								"from":    req.realSrc.String(),
+								"network": networkType.String(),
+								"err":     err.Error(),
+							}).Debugln("Failed to write UDP(DNS) packet request.")
+						}
+						return
+					}
+					select {
+					case <-dnsReqCtx.Done():
+						return
+					case <-time.After(1 * time.Second):
 					}
-					return
 				}
-				select {
-				case <-dnsReqCtx.Done():
-					return
-				case <-time.After(1 * time.Second):
+			}()
+
+			// We can block here because we are in a coroutine.
+			respBuf := pool.GetFullCap(consts.EthernetMtu)
+			defer pool.Put(respBuf)
+			// Wait for response.
+			n, err := conn.Read(respBuf)
+			if err != nil {
+				if c.timeoutExceedCallback != nil {
+					c.timeoutExceedCallback(dialArgument, err)
 				}
+				return fmt.Errorf("failed to read from: %v (dialer: %v): %w", dialArgument.bestTarget, dialArgument.bestDialer.Property().Name, err)
 			}
-		}()
+			var msg dnsmessage.Msg
+			if err = msg.Unpack(respBuf[:n]); err != nil {
+				return err
+			}
+			respMsg = &msg
+			cancelDnsReqCtx()
+		case dns.UpstreamScheme_H3:
+			roundTripper := &http3.RoundTripper{
+				TLSClientConfig: &tls.Config{
+					ServerName:         upstream.Hostname,
+					NextProtos:         []string{"h3"},
+					InsecureSkipVerify: false,
+				},
+				QuicConfig: &quic.Config{},
+				Dial: func(ctx context.Context, addr string, tlsCfg *tls.Config, cfg *quic.Config) (quic.EarlyConnection, error) {
+					udpAddr := net.UDPAddrFromAddrPort(dialArgument.bestTarget)
+					fakePkt := netproxy.NewFakeNetPacketConn(conn.(netproxy.PacketConn), net.UDPAddrFromAddrPort(tc.GetUniqueFakeAddrPort()), udpAddr)
+					c, e := quic.DialEarly(ctx, fakePkt, udpAddr, tlsCfg, cfg)
+					return c, e
+				},
+			}
+			defer roundTripper.Close()
 
-		// We can block here because we are in a coroutine.
-		respBuf := pool.GetFullCap(consts.EthernetMtu)
-		defer pool.Put(respBuf)
-		// Wait for response.
-		n, err := conn.Read(respBuf)
-		if err != nil {
-			if c.timeoutExceedCallback != nil {
-				c.timeoutExceedCallback(dialArgument, err)
+			client := &http.Client{
+				Transport: roundTripper,
 			}
-			return fmt.Errorf("failed to read from: %v (dialer: %v): %w", dialArgument.bestTarget, dialArgument.bestDialer.Property().Name, err)
-		}
-		var msg dnsmessage.Msg
-		if err = msg.Unpack(respBuf[:n]); err != nil {
-			return err
+			msg, err := sendHttpDNS(client, dialArgument.bestTarget.String(), upstream, data)
+			if err != nil {
+				return err
+			}
+			respMsg = msg
+		case dns.UpstreamScheme_QUIC:
+			udpAddr := net.UDPAddrFromAddrPort(dialArgument.bestTarget)
+			fakePkt := netproxy.NewFakeNetPacketConn(conn.(netproxy.PacketConn), net.UDPAddrFromAddrPort(tc.GetUniqueFakeAddrPort()), udpAddr)
+			tlsCfg := &tls.Config{
+				NextProtos:         []string{"doq"},
+				InsecureSkipVerify: false,
+				ServerName:         upstream.Hostname,
+			}
+			addr := net.UDPAddrFromAddrPort(dialArgument.bestTarget)
+			qc, err := quic.DialEarly(ctxDial, fakePkt, addr, tlsCfg, nil)
+			if err != nil {
+				return err
+			}
+			defer qc.CloseWithError(0, "")
+
+			stream, err := qc.OpenStreamSync(ctxDial)
+			if err != nil {
+				return err
+			}
+			defer func() {
+				_ = stream.Close()
+			}()
+
+			// According https://datatracker.ietf.org/doc/html/rfc9250#section-4.2.1
+			// msg id should set to 0 when transport over QUIC.
+			// thanks https://github.com/natesales/q/blob/1cb2639caf69bd0a9b46494a3c689130df8fb24a/transport/quic.go#L97
+			binary.BigEndian.PutUint16(data[0:2], 0)
+
+			msg, err := sendStreamDNS(stream, data)
+			if err != nil {
+				return err
+			}
+			respMsg = msg
 		}
-		respMsg = &msg
-		cancelDnsReqCtx()
 
 	case consts.L4ProtoStr_TCP:
 		// We can block here because we are in a coroutine.
 
 		conn, err = dialArgument.bestDialer.DialContext(ctxDial, common.MagicNetwork("tcp", dialArgument.mark, dialArgument.mptcp), dialArgument.bestTarget.String())
+		if upstream.Scheme == dns.UpstreamScheme_TLS {
+			tlsConn := tls.Client(&netproxy.FakeNetConn{Conn: conn}, &tls.Config{
+				InsecureSkipVerify: false,
+				ServerName:         upstream.Hostname,
+			})
+			conn = tlsConn
+		}
 		if err != nil {
 			return fmt.Errorf("failed to dial proxy to tcp: %w", err)
 		}
@@ -644,38 +719,33 @@ func (c *DnsController) dialSend(invokingDepth int, req *udpRequest, data []byte
 		}()
 
 		_ = conn.SetDeadline(time.Now().Add(4900 * time.Millisecond))
-		// We should write two byte length in the front of TCP DNS request.
-		bReq := pool.Get(2 + len(data))
-		defer pool.Put(bReq)
-		binary.BigEndian.PutUint16(bReq, uint16(len(data)))
-		copy(bReq[2:], data)
-		_, err = conn.Write(bReq)
-		if err != nil {
-			return fmt.Errorf("failed to write DNS req: %w", err)
-		}
-
-		// Read two byte length.
-		if _, err = io.ReadFull(conn, bReq[:2]); err != nil {
-			return fmt.Errorf("failed to read DNS resp payload length: %w", err)
-		}
-		respLen := int(binary.BigEndian.Uint16(bReq))
-		// Try to reuse the buf.
-		var buf []byte
-		if len(bReq) < respLen {
-			buf = pool.Get(respLen)
-			defer pool.Put(buf)
-		} else {
-			buf = bReq
-		}
-		var n int
-		if n, err = io.ReadFull(conn, buf[:respLen]); err != nil {
-			return fmt.Errorf("failed to read DNS resp payload: %w", err)
-		}
-		var msg dnsmessage.Msg
-		if err = msg.Unpack(buf[:n]); err != nil {
-			return err
+		switch upstream.Scheme {
+		case dns.UpstreamScheme_TCP, dns.UpstreamScheme_TLS, dns.UpstreamScheme_TCP_UDP:
+			msg, err := sendStreamDNS(conn, data)
+			if err != nil {
+				return err
+			}
+			respMsg = msg
+		case dns.UpstreamScheme_HTTPS:
+
+			httpTransport := http.Transport{
+				TLSClientConfig: &tls.Config{
+					ServerName:         upstream.Hostname,
+					InsecureSkipVerify: false,
+				},
+				DialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {
+					return &netproxy.FakeNetConn{Conn: conn}, nil
+				},
+			}
+			client := http.Client{
+				Transport: &httpTransport,
+			}
+			msg, err := sendHttpDNS(&client, dialArgument.bestTarget.String(), upstream, data)
+			if err != nil {
+				return err
+			}
+			respMsg = msg
 		}
-		respMsg = &msg
 	default:
 		return fmt.Errorf("unexpected l4proto: %v", dialArgument.l4proto)
 	}
@@ -766,3 +836,74 @@ func (c *DnsController) dialSend(invokingDepth int, req *udpRequest, data []byte
 	}
 	return nil
 }
+
+func sendHttpDNS(client *http.Client, target string, upstream *dns.Upstream, data []byte) (respMsg *dnsmessage.Msg, err error) {
+	// disable redirect https://github.com/daeuniverse/dae/pull/649#issuecomment-2379577896
+	client.CheckRedirect = func(req *http.Request, via []*http.Request) error {
+		return fmt.Errorf("do not use a server that will redirect, upstream: %v", upstream.String())
+	}
+	serverURL := url.URL{
+		Scheme: "https",
+		Host:   target,
+		Path:   upstream.Path,
+	}
+	q := serverURL.Query()
+	q.Set("dns", base64.RawURLEncoding.EncodeToString(data))
+	serverURL.RawQuery = q.Encode()
+
+	req, err := http.NewRequest(http.MethodGet, serverURL.String(), nil)
+	if err != nil {
+		return nil, err
+	}
+	req.Header.Set("Accept", "application/dns-message")
+	req.Host = upstream.Hostname
+	resp, err := client.Do(req)
+	if err != nil {
+		return nil, err
+	}
+	defer resp.Body.Close()
+	buf, err := io.ReadAll(resp.Body)
+	if err != nil {
+		return nil, err
+	}
+	var msg dnsmessage.Msg
+	if err = msg.Unpack(buf); err != nil {
+		return nil, err
+	}
+	return &msg, nil
+}
+
+func sendStreamDNS(stream io.ReadWriter, data []byte) (respMsg *dnsmessage.Msg, err error) {
+	// We should write two byte length in the front of stream DNS request.
+	bReq := pool.Get(2 + len(data))
+	defer pool.Put(bReq)
+	binary.BigEndian.PutUint16(bReq, uint16(len(data)))
+	copy(bReq[2:], data)
+	_, err = stream.Write(bReq)
+	if err != nil {
+		return nil, fmt.Errorf("failed to write DNS req: %w", err)
+	}
+
+	// Read two byte length.
+	if _, err = io.ReadFull(stream, bReq[:2]); err != nil {
+		return nil, fmt.Errorf("failed to read DNS resp payload length: %w", err)
+	}
+	respLen := int(binary.BigEndian.Uint16(bReq))
+	// Try to reuse the buf.
+	var buf []byte
+	if len(bReq) < respLen {
+		buf = pool.Get(respLen)
+		defer pool.Put(buf)
+	} else {
+		buf = bReq
+	}
+	var n int
+	if n, err = io.ReadFull(stream, buf[:respLen]); err != nil {
+		return nil, fmt.Errorf("failed to read DNS resp payload: %w", err)
+	}
+	var msg dnsmessage.Msg
+	if err = msg.Unpack(buf[:n]); err != nil {
+		return nil, err
+	}
+	return &msg, nil
+}
diff --git a/go.mod b/go.mod
index 0aad14c..94ba50e 100644
--- a/go.mod
+++ b/go.mod
@@ -9,6 +9,7 @@ require (
 	github.com/cilium/ebpf v0.15.0
 	github.com/daeuniverse/dae-config-dist/go/dae_config v0.0.0-20230604120805-1c27619b592d
 	github.com/daeuniverse/outbound v0.0.0-20240926154825-3905858d935f
+	github.com/daeuniverse/quic-go v0.0.0-20240413031024-943f218e0810
 	github.com/fsnotify/fsnotify v1.7.0
 	github.com/json-iterator/go v1.1.12
 	github.com/mholt/archiver/v3 v3.5.1
@@ -39,7 +40,6 @@ require (
 	github.com/awnumar/memcall v0.3.0 // indirect
 	github.com/awnumar/memguard v0.22.5 // indirect
 	github.com/cloudflare/circl v1.3.9 // indirect
-	github.com/daeuniverse/quic-go v0.0.0-20240413031024-943f218e0810 // indirect
 	github.com/davecgh/go-spew v1.1.1 // indirect
 	github.com/dsnet/compress v0.0.2-0.20210315054119-f66993602bf5 // indirect
 	github.com/go-ole/go-ole v1.3.0 // indirect
-- 
2.39.3 (Apple Git-145)

